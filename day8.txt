-------------------------------------------------
day08总结

   一、服务器模型
 *二、多进程/多线程并发（day09）
 *三、ftp文件服务器
    
---------------------------
day08笔记

一、服务器模型

1. 服务器模型（图片理解）

2. 组成：硬件服务器 （专门工程师）： 主机   集群（需要部署） （小公司一般租用：阿里巴巴阿里云）
                            厂商 ： 国内：IBM  HP  国外：联想  浪潮
             软件服务器 ：编写的服务端程序，依托硬件服务器运行。              提供给用户一定的功能服务

3. 软件服务器种类

   webserver ---》 网络的后端应用程序，提供数据处理和逻                 辑处理
   httpserver ---> 接受http请求，返回http响应
   邮箱服务器 ---》 处理邮件请求，进行邮件收发
   ftp文件服务器 --》提供文件的上传下载存储

4. 功能实现 ： 网络连接，逻辑处理，数据运算，数据交互
                       协议实现，网络数据传输。。。。

5. 模型结构(会涉及架构，现在暂时涉及不到架构) :   C/S   客户端服务器模型
                                     B/S    浏览器服务器模型

6. 服务器目标：处理速度更快，数据安全性更强，并发量更高

    硬件 ： 更高的配置，更好的硬件搭配，更高的网络速度
               更多的主机，网络安全投入
    软件 ： 占有更少的计算机资源，更稳定的运行效率，更流         畅的速度，更强大的算法，更合理的技术搭配


7. 基础服务器模型：

循环服务器（之前写的全是循环） ： 单进程程序，循环接受客户请求，处理请求。处理完毕再接受下一个请求。

特点 ： 每次只能处理一个客户端请求
        如果客户端长期占有服务器则无法处理其他客户端请求。

优点 ： 实现简单，占用资源少
缺点 ： 无法同时处理多客户端，体验差
使用情况 ： 任务短暂，可以快速完成。udp比tcp更适合循环

并发服务器 ： 能够同时处理多个客户端任务请求（三种模型往往搭配使用）

    IO 并发  (属于单进程):  IO多路复用     协程 （单线程）
      
      优点 ： 可以实现IO的并发操作，占用系统资源少（单进程），IO处理速度快
      缺点 ： 不能监控cpu密集的情况，并能有长期阻塞

    多进程/多线程并发：为每个客户端单独提供一个进程/线程处理客户端请求 

      优点 ： 客户端可以长期占有服务器，能够使用多核资源，可以处理IO或者cpu运算
      缺点 ： 消耗计算机资源较多

二、多进程/多线程并发：152：55分
（一）多进程并发模型（用fork/multiprocessing, 此处先用fork,后面线程会用到multiprocessing）

使用fork实现多进程并发（连接到一个客户端处理时间比较长才适合用并发）
1. 创建套接字，绑定，监听（需要网络的配合）
2. 等待接收客户端请求、创建新的进程处理客户端请求（并发：可以接收多个客户端请求）
3. 父进程继续等待接收其他客户端连接
4. 如果客户端退出则关闭子进程（每个子进程专门对应一个客户端）

cookie：
在父进程中忽略子进程状态改变,子进程退出自动由系统处理
signal.signal(signal.SIGCHLD,signal.SIG_IGN)


三、ftp文件服务器（利用多进程并发）

项目功能
* 服务端和客户端两部分，要求启动一个服务端，可以同时   处理多个客户端请求
* 功能 ： 1. 可以查看服务端文件库中所有的普通文件
             2. 从客户端可以下载文件库的文件到本地
	  3. 可以将本地文件上传的服务端文件库
	  4. 退出
* 客户端使用print在终端打印简单的命令提示，通过命令   提示发起请求

1. 技术分析 （fork  tcp 并发）
2. 每个功能要单独封装，整体功能写在一个类中
3. 如何搭建整体架构，完成网络通讯

功能分析
1. 获取文件列表
   客户端 ：  * 发送请求
              * 得到回复判断能否获取列表
	      * 接收文件名称列表打印
   服务端 ： * 接收请求
             * 判断请求类型
	     * 判断能否满足请求，回复信息确认
	     * 执行请求发送文件列表
    
cookie：

os.listdir(path)  获取目录中文件列表
os.path.isfile()  判断是否为普通文件
os.path.isdir()  判断是否为目录

2 文件下载
  客户端 ： * 发送请求 （文件名）
            * 得到回复判断能否下载
	    * 下载文件

  服务端 ： * 接收请求
            * 判断请求类型
	    * 判断能否满足请求，回复信息确认
	    * 执行请求发送文件
3 文件上传
    客户端：
          * 发送请求（文件名）
	  * 得到回复判断能否上传
	  * 发送文件

    服务端：
          * 接收请求
	  * 判断请求类型
	  * 判断能否满足请求，回复信息确认
	  * 执行文件下载

作业 ： 
1. 完成文件服务器的上传功能
2. 复习HTTP协议，和httpserver第一版
3. 进程线程网络总结 ，难点程序再写一遍




